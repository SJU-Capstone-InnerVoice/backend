name: Deploy Spring Boot to EC2 

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📡 EC2에 SSH로 접속하여 프로젝트 디렉토리 이동 및 코드 pull
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            echo "✅ EC2 접속 성공"

            cd /home/ec2-user/backend
            git pull origin main

      - name: 🛑 실행 중인 애플리케이션 종료 (포트 8080)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            PID=$(lsof -t -i:8080)
            if [ -n "$PID" ]; then
              echo "🔁 실행 중인 프로세스를 종료합니다 (PID: $PID)"
              kill -9 $PID
            else
              echo "🔍 실행 중인 프로세스가 없습니다"
            fi

      - name: 🧹 gradlew 실행 권한 부여 + 애플리케이션 빌드
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ec2-user/backend

            # ✅ JAVA_HOME 설정
            echo 'export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64' >> ~/.bashrc
            echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc
            source ~/.bashrc
            
            chmod +x ./gradlew
            ./gradlew clean build -x test

      - name: 🚀 애플리케이션 실행 (docker profile 적용)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ec2-user/backend
            echo "🚀 백그라운드로 애플리케이션을 실행합니다"
            nohup java -Dspring.profiles.active=docker -jar build/libs/*SNAPSHOT.jar > output.log 2>&1 &
